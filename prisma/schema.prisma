generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  USER
  ADMIN
}

model Users {
  id                     Int                         @id @unique @default(autoincrement())
  uid                    String                      @unique @default(uuid())
  email                  String                      @unique @db.VarChar(100)
  emailVerifiedAt        DateTime?                   @map("email_verified_at")
  password               String
  role                   RoleEnum                    @default(USER)
  lastLogin              DateTime?                   @map("last_login")
  isActive               Boolean                     @default(true) @map("is_active")
  createdAt              DateTime                    @default(now()) @map("created_at")
  updatedAt              DateTime                    @updatedAt @map("updated_at")
  Profile                Profile?
  UserTagsCounter        UserNewsletterTagsCounter[]
  UserGalleryTagsCounter UserGalleryTagsCounter[]
  AnswerAudio            ListeningAnswers[]
  ListeningAnswers       SpeakingAnswers[]

  @@map("users")
}

model Profile {
  id        Int      @id @unique @default(autoincrement())
  userId    Int      @unique @map("user_id")
  nickName  String   @map("nick_name") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Files {
  id               Int                  @id @unique @default(autoincrement())
  name             String?              @db.VarChar(100)
  description      String?              @db.VarChar(100)
  bucketName       String?              @map("bucket_name") @db.VarChar(100)
  objectName       String?              @map("object_name") @db.VarChar(100)
  url              String?              @map("url") @db.VarChar(500)
  path             String?              @db.VarChar(100)
  extension        String?              @db.VarChar(10)
  size             Int?
  disk             String               @default("local") @db.VarChar(100)
  isActive         Boolean              @default(true) @map("is_active")
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  PhotoGallery     PhotoGallery?
  Audios           ListeningQuestions[]
  ListeningAnswers SpeakingAnswers[]

  @@map("files")
}

model Tags {
  id                     Int                         @id @unique @default(autoincrement())
  name                   String
  slug                   String?                     @db.VarChar(100)
  isActive               Boolean                     @default(true) @map("is_active")
  createdAt              DateTime                    @default(now()) @map("created_at")
  updatedAt              DateTime                    @updatedAt @map("updated_at")
  UserTagsCounter        UserNewsletterTagsCounter[]
  UserGalleryTagsCounter UserGalleryTagsCounter[]

  @@map("tags")
}

model Newsletters {
  id                        Int                         @id @unique @default(autoincrement())
  title                     String
  description               String                      @db.Text
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  UserNewsletterTagsCounter UserNewsletterTagsCounter[]

  @@map("newsletters")
}

model PhotoGallery {
  id                     Int                      @id @unique @default(autoincrement())
  title                  String?
  description            String?
  imageId                Int                      @unique @map("image_id")
  Image                  Files                    @relation(fields: [imageId], references: [id])
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  UserGalleryTagsCounter UserGalleryTagsCounter[]

  @@map("photo_gallery")
}

model UserNewsletterTagsCounter {
  tagId        Int         @map("tag_id")
  Tag          Tags        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId       Int         @map("user_id")
  User         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsletterId Int         @map("newsletter_id")
  Newsletter   Newsletters @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@unique([userId, tagId, newsletterId])
  @@map("user_newsletter_tags_counter")
}

model UserGalleryTagsCounter {
  tagId          Int          @map("tag_id")
  Tag            Tags         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  userId         Int          @map("user_id")
  User           Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoGalleryId Int          @map("photo_gallery_id")
  PhotoGallery   PhotoGallery @relation(fields: [photoGalleryId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@unique([userId, tagId, photoGalleryId])
  @@map("user_gallery_tags_counter")
}

model ListeningQuestions {
  id             Int                @id @unique @default(autoincrement())
  title          String?
  description    String?
  audioId        Int                @map("audio_id")
  Audio          Files              @relation(fields: [audioId], references: [id])
  isActive       Boolean            @default(true) @map("is_active")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  AnswerQuestion ListeningAnswers[]

  @@map("listening_questions")
}

model ListeningAnswers {
  answer     String             @db.Text
  questionId Int                @map("question_id")
  Question   ListeningQuestions @relation(fields: [questionId], references: [id])
  userId     Int                @map("user_id")
  User       Users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  @@unique([questionId, userId])
  @@map("listening_answers")
}

model SpeakingQuestions {
  id               Int               @id @unique @default(autoincrement())
  question         String
  description      String?
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  ListeningAnswers SpeakingAnswers[]

  @@map("speaking_questions")
}

model SpeakingAnswers {
  description String?           @db.Text
  answerId    Int               @map("answer_id")
  AnswerFile  Files             @relation(fields: [answerId], references: [id])
  questionId  Int               @map("question_id")
  Question    SpeakingQuestions @relation(fields: [questionId], references: [id])
  userId      Int               @map("user_id")
  User        Users             @relation(fields: [userId], references: [id])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@unique([questionId, userId, answerId])
  @@map("speaking_answers")
}

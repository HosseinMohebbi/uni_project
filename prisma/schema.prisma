generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int       @id @unique @default(autoincrement())
  uid             String    @unique @default(uuid())
  email           String    @unique @db.VarChar(100)
  emailVerifiedAt DateTime? @map("email_verified_at")
  password        String
  lastLogin       DateTime? @map("last_login")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  Profile         Profile?

  @@map("users")
}

model Profile {
  id        Int      @id @unique @default(autoincrement())
  userId    Int      @unique @map("user_id")
  nickName  String   @map("nick_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Files {
  id          Int          @id @unique @default(autoincrement())
  name        String?      @db.VarChar(100)
  description String?      @db.VarChar(100)
  bucketName  String?      @map("bucket_name") @db.VarChar(100)
  objectName  String?      @map("object_name") @db.VarChar(100)
  url         String?      @map("url") @db.VarChar(500)
  path        String?      @db.VarChar(100)
  extension   String?      @db.VarChar(10)
  size        Int?
  disk        String       @default("local") @db.VarChar(100)
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  Newsletters Newsletters?

  @@map("files")
}

model Tags {
  id             Int              @id @unique @default(autoincrement())
  name           String
  slug           String           @db.VarChar(100)
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  NewsletterTags NewsletterTags[]

  @@map("tags")
}

model Newsletters {
  id             Int              @id @unique @default(autoincrement())
  title          String
  description    String           @db.Text
  imageId        Int              @unique @map("image_id")
  Image          Files            @relation(fields: [imageId], references: [id])
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  NewsletterTags NewsletterTags[]

  @@map("newsletters")
}

model NewsletterTags {
  tagId        Int         @map("tag_id")
  Tag          Tags        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  newsletterId Int         @map("newsletter_id")
  Newsletter   Newsletters @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@unique([newsletterId, tagId])
  @@map("newsletter_tags")
}
